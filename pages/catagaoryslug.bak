import React, { useState, useEffect, useCallback } from 'react';
import axios from 'axios';
import Link from 'next/link';
import InfiniteScroll from 'react-infinite-scroll-component';
import { useRouter } from 'next/router';
import { ClipLoader } from 'react-spinners';
import Head from 'next/head';
import '../app/index.css';

const SkeletonLoader = () => (
    <div className='skeleton-container'>
        {Array.from({ length: 10 }).map((_, index) => (
            <div key={index} className='card skeleton-card'>
                <div className='skeleton-image'></div>
                <div className='card-content'>
                    <div className='skeleton-title'></div>
                    <div className='skeleton-content'></div>
                    <div style={{ display: 'flex', alignItems: 'center' }}>
                        <div className='skeleton-avatar'></div>
                        <div className='skeleton-username'></div>
                        <div className='skeleton-date'></div>
                    </div>
                </div>
            </div>
        ))}
    </div>
);

interface Post {
    id: string;
    slug: string;
    category_slug: string;
    category_name: string;
    image: string;
    title: string;
    meta_description: string;
    read_time: string;
    username: string;
    avatar: string;
    views: number;
    created_at: string;
}

const CategoryList = ({ categoryName }: { categoryName: string }) => {
    const [categoryPosts, setCategoryPosts] = useState<Post[]>([]);
    const [page, setPage] = useState(1);
    const [hasMore, setHasMore] = useState(true);
    const [isEmpty, setIsEmpty] = useState(false);
    const [isInitialLoad, setIsInitialLoad] = useState(true);
    const [loading, setLoading] = useState(false);
    const router = useRouter();
    const { category_slug } = router.query;

    const fetchCategoryPosts = useCallback(async (pageNum: number) => {
        if (!category_slug) return;
        setLoading(true);
        try {
            const response = await axios.get(`https://blog.tourismofkashmir.com/apis?category_slug=${category_slug}&page=${pageNum}`);
            const newPosts: Post[] = response.data;

            if (Array.isArray(newPosts) && newPosts.length > 0) {
                setCategoryPosts((prevPosts) => [...prevPosts, ...newPosts]);
                setIsEmpty(false);
            } else if (pageNum === 1 && newPosts.length === 0) {
                setIsEmpty(true);
                setHasMore(false);
            } else {
                setHasMore(false);
            }
        } catch (error) {
            console.error('Error fetching category posts:', error);
            setHasMore(false);
        } finally {
            setLoading(false);
            setIsInitialLoad(false);
        }
    }, [category_slug]);

    useEffect(() => {
        if (category_slug) {
            fetchCategoryPosts(1);
        }
    }, [category_slug, fetchCategoryPosts]);

    const fetchMoreData = () => {
        if (hasMore) {
            const nextPage = page + 1;
            setPage(nextPage);
            fetchCategoryPosts(nextPage);
        }
    };

    return (
        <>
            <Head>
                <title>{categoryName} - Leak News</title>
                <meta property="og:title" content={categoryName} />
                <meta property="og:description" content={`Explore posts from the ${categoryName} category.`} />
                <meta property="og:type" content="website" />
                <meta property="og:url" content={router.asPath} />
            </Head>
            <div className="category-list">
                {isInitialLoad ? (
                    <SkeletonLoader />
                ) : isEmpty ? (
                    <div className="empty-category-message">
                        <p>There are no posts in this category.</p>
                    </div>
                ) : (
                    <InfiniteScroll
                        dataLength={categoryPosts.length}
                        next={fetchMoreData}
                        hasMore={hasMore}
                        loader={
                            <div style={{ display: 'flex', justifyContent: 'center', padding: '20px' }}>
                                <ClipLoader color="#000" loading={loading} size={30} />
                            </div>
                        }
                        endMessage={
                            <p style={{ textAlign: 'center' }}>
                                <b>Yay! You have seen it all</b>
                            </p>
                        }
                    >
                        {categoryPosts.map((post) => (
                            <div key={post.id || post.slug} className="card" onContextMenu={(e) => e.preventDefault()}>
                                <Link href={`/${post.category_slug}/${post.slug}`} className="news-item-link">
                                    <div className="image-container" style={{ position: "relative" }}>
                                        <img src={post.image} alt={post.title} className="news-item-image" style={{ width: "100%", height: "180px", objectFit: "cover" }} />
                                        <div style={{ position: "absolute", bottom: "10px", right: "10px", backgroundColor: "rgba(0, 0, 0, 0.5)", color: "white", padding: "5px", borderRadius: "5px", fontSize: "0.8rem" }}>
                                            {post.read_time} min read
                                        </div>
                                    </div>
                                    <div className='card-content'>
                                        <h2>{post.title}</h2>
                                        <p>{post.meta_description}</p>
                                    </div>
                                </Link>
                                <div style={{ display: 'flex', alignItems: 'center', marginBottom: '5px' }}>
                                    <Link href={`/profile/${post.username}`} style={{ textDecoration: 'none', color: 'inherit', display: 'flex', alignItems: 'center' }}>
                                        <img src={`https://blog.tourismofkashmir.com/${post.avatar}`} alt='Avatar' className='avatar' style={{ width: '30px', height: '30px', borderRadius: '50%', marginRight: '5px' }} />
                                        <span className='username'>{post.username}</span>
                                    </Link>
                                    <span className='views'>. {formatViews(post.views)} views</span>
                                    <span className='date'>{formatDate(post.created_at)}</span>
                                </div>
                            </div>
                        ))}
                    </InfiniteScroll>
                )}
            </div>
        </>
    );
};

export const getServerSideProps = async (context: { query: { category_slug: string } }) => {
    const { category_slug } = context.query;

    if (!category_slug) {
        return { props: { categoryName: '' } };
    }

    try {
        const response = await axios.get(`https://blog.tourismofkashmir.com/apis?category_slug=${category_slug}&page=1`);
        const initialPosts: Post[] = response.data;
        const categoryName = initialPosts[0]?.category_name || category_slug;

        return {
            props: {
                categoryName,
            },
        };
    } catch (error) {
        console.error('Error fetching category name:', error);
        return {
            props: {
                categoryName: '',
            },
        };
    }
};

export const formatViews = (views: number): string => {
    if (views >= 10000000) {
        return Math.floor(views / 10000000) + 'cr';
    } else if (views >= 1000000) {
        return Math.floor(views / 1000000) + 'M';
    } else if (views >= 100000) {
        return Math.floor(views / 100000) + 'L';
    } else if (views >= 1000) {
        return Math.floor(views / 1000) + 'k';
    } else {
        return views.toString();
    }
};

export const formatDate = (date: string): string => {
    const currentDate = new Date();
    const postDate = new Date(date);
    const timeDifference = currentDate.getTime() - postDate.getTime();
    const seconds = Math.floor(timeDifference / 1000);
    const minutes = Math.floor(seconds / 60);
    const hours = Math.floor(minutes / 60);
    const days = Math.floor(hours / 24);
    const yearsDifference = currentDate.getFullYear() - postDate.getFullYear();

    if (seconds < 60) {
        return seconds + ' sec ago';
    } else if (minutes < 60) {
        return minutes + ' mins ago';
    } else if (hours < 24) {
        return hours + ' hours ago';
    } else if (days < 7) {
        return days + ' days ago';
    } else if (days < 30) {
        const weeks = Math.floor(days / 7);
        return weeks + ' weeks ago';
    } else if (yearsDifference < 1) {
        return days + ' days ago';
    } else {
        return yearsDifference + ' years ago';
    }
};

export default CategoryList;
